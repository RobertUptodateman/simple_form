import { CONFIG } from '../config.js';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
 */
export class TelegramService {
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
     * @param {Object} formData - –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
     * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    static async sendMessage(formData) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if (CONFIG.TELEGRAM_BOT_TOKEN === 'YOUR_BOT_TOKEN_HERE' || 
            CONFIG.TELEGRAM_CHAT_ID === 'YOUR_CHAT_ID_HERE') {
            throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TOKEN –∏ CHAT_ID –≤ —Ñ–∞–π–ª–µ config.js');
        }

        const message = this.formatMessage(formData);
        const url = `https://api.telegram.org/bot${CONFIG.TELEGRAM_BOT_TOKEN}/sendMessage`;
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: CONFIG.TELEGRAM_CHAT_ID,
                    text: message,
                    parse_mode: 'HTML'
                })
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.description || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
            }

            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            throw new Error(
                error.message === 'Failed to fetch' 
                    ? '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.'
                    : error.message
            );
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ HTML —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param {Object} formData - –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    static formatMessage(formData) {
        return `
<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</b>

üë§ –§–ò–û: <b>${formData.fullName}</b>
üî¢ –ò–ù–ù: <b>${formData.inn}</b>
üìÖ –î–∞—Ç–∞: <b>${new Date().toLocaleString()}</b>
`;
    }
}

# Правила для Windsurf IDE

## Общие принципы работы
	1. Проверка правил перед действием
		- Перечитывать все правила в начале диалога
		- Сверять каждое действие с правилами
		- При отсутствии явных правил - спрашивать разрешение

	2. Пошаговое выполнение
		- Показывать планируемые изменения до их внесения
		- Ждать подтверждения перед любыми изменениями
		- Объяснять соответствие действий правилам

	3. Подтверждение действий
		- Не вносить изменения без явного подтверждения
		- Показывать промежуточные результаты
		- При отклонении - предлагать альтернативы

	4. Проверка результатов
		- После внесения изменений проверять результат
		- Сверять с правилами постфактум
		- Предлагать исправления при обнаружении несоответствий

## Принцип "не делать лишнего"
	1. Изменения только по запросу
		- Не вносить изменения в верстку и стили без прямого указания
		- Не создавать новые файлы при оптимизации кода
		- Не менять структуру папок и серверный код без разрешения

	2. Минимум необходимого кода
		- Использовать готовые компоненты Bootstrap вместо кастомных стилей
		- В JavaScript писать только логику, всё оформление - в CSS
		- Не дублировать функционал менеджеров (State/Event/DOM)

	3. Работа в рамках структуры
		- Редактировать файлы только в их текущих локациях
		- Следовать модульной структуре с точкой входа в `main.js`
		- Использовать существующие инструменты для работы с CHANGELOG.md

## Окружение
	- Windows, Go, Frontend (HTML/CSS/JS)
	- Директория: d:/Projects/src/WEB/greenmedia_website
	- Сервер: localhost:4000 (`go run ./cmd/web`)

## Правила коммитов и ведения CHANGELOG.md
	1. Специальные команды для работы с CHANGELOG.md:
		- `→` - Команда фиксации текущих изменений
			* Очищает весь раздел "## Пул изменений"
			* Сравнивает код последнего коммита с действующим кодом
			* Записывает в раздел "## Пул изменений" новый список изменений
			* Формат записи: "YYYY-MM-DD HH:MM → Краткое описание изменений"

		- `§` - Команда формирования общего комментария
			* Анализирует все пункты из "## Пул изменений"
			* Сравнивает с последней записью в "## Общий комментарий"
			* Создает лаконичное описание всех произошедших изменений
			* Перед записью показывает комментарий в диалоге для подтверждения
			* После подтверждения добавляет в раздел "## Общий комментарий":
				- Первая строка: "YYYY-MM-DD HH:MM §"
				- Со следующей строки: комментарий по правилам Conventional Commits
			* После подтверждения добавляет в раздел "## Общий комментарий"

		- `⌘` - Команда создания вех проекта
			* Формирует обобщенные пункты изменений проекта
			* Анализирует все записи из "## Общий комментарий"
			* Сравнивает с существующими пунктами в "## История изменений"
			* Автоматически записывает в раздел "## История изменений"
			* Для незначительных изменений: только обновляет дату и время
			* Для существенных изменений: создает новую веху с датой создания

	2. Структура CHANGELOG.md:
		- "## Пул изменений" - текущие изменения в коде (команда →)
		- "## Общий комментарий" - суммарные изменения за период (команда §)
		- "## История изменений" - ключевые вехи проекта (команда ⌘)

	3. Формат комментариев:
		- Следовать Conventional Commits (feat:, fix:, etc.)
		- Первая строка - краткое описание
		- Далее список конкретных изменений

## Файлы
	⛔ Требуют разрешения:
		- Удаление/перемещение файлов
		- Изменение cmd/ и структуры папок

	✅ Разрешено редактировать:
		- `ui/html/`, `ui/static/{css,js,img}/`
		- [README.md](cci:7://file:///d:/Projects/src/WEB/greenmedia_website/README.md:0:0-0:0), `robots.txt`, `CHANGELOG.md`, `sitemap.xml`

## Правила верстки
	1. Приоритет использования стилей:
		- В первую очередь использовать нативные классы и компоненты Bootstrap
		- Кастомные стили применять только если невозможно решить задачу средствами Bootstrap
	2. Не менять верстку и стили без прямого указания
	3. Разрешено менять только пути и ссылки в файлах
	4. При устранении дублирования кода - удалять его в нужном файле, не создавая новых файлов
	5. Адаптивная верстка:
		- Использовать ТОЛЬКО классы Bootstrap для адаптации под мобильные устройства (flex-column, flex-lg-row и т.д.)
		- ЗАПРЕЩЕНО использовать @media запросы в CSS для адаптивной верстки
		- Все брейкпоинты должны быть реализованы через систему сеток и утилиты Bootstrap

## Правила работы с JavaScript (ui/static/js/)
	1. Архитектура менеджеров
		- Все взаимодействия через соответствующие менеджеры
		- Запрещены прямые обращения к DOM/Window/Events в обход менеджеров
		- Строгая иерархия зависимостей менеджеров:
			* StateManager → независимый
			* EventManager → зависит от StateManager
			* DOMManager → зависит от StateManager
			* ComponentManager → зависит от всех менеджеров

	2. Правила импорта
		- Менеджеры импортируются только из /modules/
		- Утилиты импортируются только из /utils/
		- Компоненты импортируются напрямую из корня js/
		- Запрещен импорт менеджеров в утилиты

	3. Работа с состоянием
		- Любые изменения состояния только через StateManager
		- Чтение состояния только через getState()
		- Запрещено прямое изменение state без методов
		- Обязательная синхронизация с commonState

	4. События и DOM
		- Все слушатели событий через EventManager
		- Все манипуляции с DOM через DOMManager
		- Обязательное использование { passive: true }
		- Кэширование DOM-запросов

	5. Компоненты
		- Инициализация только через ComponentManager
		- Каждый компонент - отдельный класс
		- Обязательная структура SELECTORS
		- Методы init() для инициализации

	6. Разделение логики и оформления
		- JavaScript отвечает только за логику приложения
		- Весь дизайн и оформление должны быть в CSS
		- Если скрипт участвует в оформлении, он все равно отвечает только за логику изменений

	7. Модульная структура
		- Точка входа - `main.js`
		- Каждый модуль в отдельном файле
		- Компоненты в папке `modules/`
		- Утилиты в папке `utils/`

	8. Правила работы с данными
		- Управление состоянием только через `StateManager`
		- Работа с событиями только через `EventManager`
		- Изменение DOM только через `DOMManager`
		- Запрещено прямое изменение DOM-элементов

## Язык
	- Общение и комментарии: русский
	- Код: английский